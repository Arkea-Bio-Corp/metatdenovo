/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/metatdenovo Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    input                       = null
    sandbox                     = false //set to true if not on tower/batch
    // Splitting fastq options
    split_size                  = 1_000_000

    // Trimming options
    trimmo                      = 'ILLUMINACLIP:TruSeq3-PE-2.fa:2:30:10 SLIDINGWINDOW:4:20 MINLEN:50'
    trim_quality                = 20
    trim_length                 = 50
    trim_n                      = true
    trim_nextseq                = false

    // Bowtie2 options
    indexdir                    = null

    // SortMeRNA options
    rna_idx                     = null
    silva_reference             = null

    // Kraken2 options
    use_names                   = true
    report_zero_counts          = false
    memmapping                  = true
    confidence                  = 0
    archaea_db                  = null
    no_archaea_db               = null

    // Trinity options
    normalize_assembly          = true
    min_kmer_cov                = 2
    min_contig_length           = 200

    // CD-HIT(-EST) options
    word_length                 = 10
    percent_seq_id              = 0.98

    // HMMSEARCH options
    hmmdir                      = null
    hmmerfile                   = null

    // Eggnog options
    annot_sens                  = 'very-sensitive'
    annot_eval                  = 0.00001
    annot_score                 = false
    eggnogdir                   = null

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Boilerplate options
    outdir                     = null
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    version                    = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'genomes'

    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                  = '256.GB'
    max_cpus                    = 64
    max_time                    = '240.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled          = true
        docker.userEmulation    = true
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    podman {
        podman.enabled          = true
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    shifter {
        shifter.enabled         = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
    }
    charliecloud {
        charliecloud.enabled    = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
    }
    test                { includeConfig 'conf/test.config'              }
    test_filter         { includeConfig 'conf/test_filter.config'       }
    test_bowtie         { includeConfig 'conf/test_bowtie.config'       }
    test_cd_hit_est     { includeConfig 'conf/test_cd_hit_est.config'   }
    test_sortmerna      { includeConfig 'conf/test_sortmerna.config'    }
    test_diginorm       { includeConfig 'conf/test_diginorm.config'     }
    test_full           { includeConfig 'conf/test_full.config'         }
    test_hmmscan        { includeConfig 'conf/test_hmmscan.config'      }
    test_kraken2        { includeConfig 'conf/test_kraken2.config'      }
    test_prokka         { includeConfig 'conf/test_prokka.config'       }
    test_transdecoder   { includeConfig 'conf/test_transdecoder.config' }
    test_eggnog         { includeConfig 'conf/test_eggnog.config'       }
    test_eukulele       { includeConfig 'conf/test_eukulele.config'     }
    test_rnaspades      { includeConfig 'conf/test_rnaspades.config'    }
    test_salmon         { includeConfig 'conf/test_salmon.config'       }
    test_trim_galore    { includeConfig 'conf/test_trim_galore.config'  }
    test_trinity        { includeConfig 'conf/test_trinity.config'      }
    test_dedupe         { includeConfig 'conf/test_dedupe.config'       }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 16
        executor.memory        = 60.GB
    }
}


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/metatdenovo'
    author          = """Danilo Di Leo, Emelie Nilsson & Daniel Lundin"""
    homePage        = 'https://github.com/nf-core/metatdenovo'
    description     = """Assembly and annotation of metatranscriptomic data, both prokaryotic and eukaryotic"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.1'
    version         = '2.5.1'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
